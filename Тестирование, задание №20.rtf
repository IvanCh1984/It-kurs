Вопросы по пройденным заданиям.
1. Как правильно настроить форму для отправки данных в обработчик? Какие атрибуты прописать, какие значения?

Ответ: для отправки в обработчик мы начинаем заполнять форму, сначала в теге <form> атрибут action мы указываем обработчик к которому обращаются данные формы,  атрибут method  в котором мы можем передавать методами GET или POST, если не указать метод в форме тогда по умолчанию форма будет отправлять методом GET. В теге <input>  мы указываем атрибуты type, name в зависимости какие данные будем передовать. В теге <button>  указываем атрибут type="submit".
2. Что такое обработчик? Какую задачу он решает? А зачем выделять его в отдельный файл? В чем польза такого подхода?
Ответ: 1) обработчик - это отдельный файл в нашем курсе с расширение .php на который мы переходим из формы. 2) Он решает задачу в которой он принимает данные из формы, обрабатывает данные в зависимости, что от него нужно, к примеру: подключится к базе данных, создать уникальное название. 3) Обработчик выделяют в отдельный файл для того, что бы у нас была возможность писать и проверять код малыми частями. 4) Польза такого подхода в том, что мы не перегружаем файлы кодом, выстраиваем нужную архитектуру, контролируем работоспособность кода.
3. Какие методы бывают отправки данных через форму? В чем их разница? В каком случае использовать один, а когда другой?
Ответ: 1) методы отправки данных через форму бывают двух видов: GET и POST, для выбора метода в теге <form> используется атрибут method, а его значениями выступают ключевые слова GET и POST. Если атрибут method не задан, то по умолчанию данные отправляются методом GET. 2) Разница между ними в том, что метод GET отправляет через адресную стоку в браузере ограниченную информацию только в виде текста, которую могут увидеть другие лица, а метод POST позволяет передавать разные виды информации. 3) В случае передачи id можно использовать метод GET, если передаём изображение используем метод POST   из-за ограниченности метода GET и его не безопасности.
4. Опишите процесс записи строки в базу данных: как подключиться, подготовить запрос и выполнить.
Ответ: 
$pdo = new PDO("mysql:host=localhost;dbname=my_project", "root", ""); // создаём переменную в которой указываем класс PDO предоставляющий соединение между PHP и базой данных, где перечисляем хост, название базы данных, пользователя и пароль.
$sql = "INSERT INTO my_table(text) VALUES(:text)"; // создаём переменную в которой используем sql - язык базы данных, прописываем что именно нужно сделать. (:text) - метка для безопасности, не даёт возможности другим лицам используя sql - запрос вносить свой код без нашего разрешения.
$statement = $pdo -> prepare($sql); // подготавливаем запрос.
$statement -> execute(['text' => $text]); // и выполняем.
5. Какой глобальный массив используется при создании флеш-сообщений?
Ответ:  $_SESSION.
6. Опишите пошагово как создать и вывести флеш-сообщение.
Ответ: 1) в начале html файла указываем скрипт <?php session_start();?> .
2) создаём форму: <form action="save_task_11.php" method="post">
  <label class="form-label" for="simpleinput">Text</label>
 <input type="text" id="simpleinput" class="form-control" name="text">
 <button class="btn btn-success mt-3" type="submit">Submit</button>
                                                                                               </form>,
через которую выходим на обработчик.
3) в обработчике пишем session_start(), создаём переменную $text, которая принимает в себя глобальный массив $_POST['text'];
4) подключаемся к базе данных, подготавливаем запрос, выполняем его.
5) создаём проверочное условие, проверяем.
 if(!empty($task)) {
  $message = "Введеная запись уже присутствует в таблице!";
  $_SESSION['danger'] = $message;}// получаем флеш-сообщение.
7. Как проверить текст на формат эл. адреса средствами php?
Ответ: выполняется эта проверка встроенной функцией filter_var().
Пример:
$email = "MyEmail@mysite.ru";
if (filter_var($email, FILTER_VALIDATE_EMAIL)) {
   echo "Адрес указан корректно.";
}else{
   echo "Адрес указан не правильно.";
}
8. Какие функции используются для генерации пароля и его проверку?
Ответ: генерирует пароль функция - password_hash($password, algo:PASSWORD_DEFAULT), где указывается пароль и константа, в этом случае на 60 симфолов, а проверяет соответствует ли пароль хешу функция password_verify(), где указывается пароль и хеш, который создаёт функция password_hash().
9. Почему важно сохранять пароль в виде хэша? Почему не рекомендуется хранить пароль в открытом виде?
Ответ: всё дело в безопасности и личных данных пользователя, чтобы злоумышленники не взломали пароль. Кто владеет информацией, тот владеет миром! Даже разработчики не должны знать реальный пароль!
10. Напишите какая есть особенность у веб-сервера которую покрывает Сессия? Иными словами, зачем нужна Сессия?
Ответ: сессии позволяют нам хранить временные данные браузера и получать их в тот момент, когда между данным браузером и сайтом устанавливается соединение, на определенный промежуток времени. Получение кратковременной информации которая при обновлении страницы исчезает.
11. Опишите пошагово реализацию функционала Аутентификации(входа в систему).
Ответ: Просьба к пользователю доказать свою личность называется аутентификацией.
1) Создание формы - форма может быть схожа с индексной страницей, которая и переводит к аутентификации. Указание атрибутов в форме, в начале файла где форма аутентификации запись тега <?php session_start(); ?>.
2) Создание файла аутентификации где так же в начале файла пишем скрипт <?php session_start(); ?>, далее создаём переменные $email и $password, которым присваиваем значения полученные из формы методом POST. Подключаемся к базе данных, выполняем запрос и получаем переменную из базы данных. Подставляя переменную в условия мы проверяем логин и пароль. Проверяем пароль обязательно при помощи функции password_verify, так как пароль хешированный. При совпадении логина и пароля мы аутентифицируемся.
12. Какая есть особенность настройки формы для загрузки файлов?
Ответ: атрибут enctype="multipart/form-data.
13. Какое значение должно быть у инпута для множественной загрузки файлов?
Ответ: name="image[]" - указываем символ как в php обознающей массив , multiple.
14. Как создать уникальное название файла?
Ответ:  uniqid(), уникальный идентификатор.
15. Напишите названия функций для загрузки файла, проверки существует ли файл в папке, удаления файла.
Ответ: move_uploaded_file() - загрузка; 
            file_exists() - проверка;
            unlink() - удаление;
16. Какой глобальный массив хранит все файлы передаваемые через форму?
Ответ: $_FILES;
17. Опишите структуру глобального массива хранящего файлы: какие имеет ключи и значения?
Ответ: 
 { ["image"]=> // название масива полученного из формы <input name="image">,
{ ["name"]=> "1.jpg" // имя файла,
["type"]=> "image/jpeg" // тип файла,
[ "tmp_name"]=> "C:\OSPanel\userdata\temp\upload\phpB3D0.tmp" // временное хранилище на сервере,
["error"]=> int(0) // ошибка,
["size"]=> int(105803) }//  размер файла}
18. Помогите человеку решить задачу. «Пользователь загрузил файл и нажимает отправить. Он ожидает, что файл сохранится в папку, а название в базу. Файл сохраняется в папку, но в базу название не сохраняется» В чем может быть ошибка?
Ответ: 1) проверить ошибку в подключении к базе данных. 2) проверить запрос. 3) проверить переменную, которая передаёт информацию в нужное поле базы данных.
19. Помогите человеку решить задачу. «Создал массив элементов, и хочу вывести при помощи цикла. Вроде бы все написал, но выходит ошибка: illegal offset type» Что нужно сделать, чтобы решить эту проблему?
Ответ: проверить массив, ошибка может быть в том, что задаётся ключ массивом. 
20. Что означает эта ошибка. « Parse error Unexpected (, expected ;» Что нужно сделать, чтобы избавить от ошибки?
Ответ: необходимо этот знак"," заменить на этот";".
21. Помогите человеку решить задачу. «Создал форму с инпутом. Пишу текст и отправляю. В обработчике $_POST пустой» В чем может быть ошибка?
Ответ: необходимо проверить атрибуты в форме, method="post", type="text".
22. Чем технически отличается глобальный массив от обычного массива?
Ответ: глобальный массив доступен в любом месте скрипта, так же являются встроенными и доступными во всех областях.
23. Дайте человеку совет. Он говорит: «Когда я пишу код, я не обращаю внимания на названия переменных, функций и массивов. Для меня все и так понятно. Поэтому я даю короткие названия, типа $a, $b, $smth. Но потом, понимаю, что мне тяжело ориентироваться в них»?
Ответ: первые программисты для того, что бы не терять логику, ориентацию в файлах, проектах придумали называть переменные, функции понятными именами, названиями. Память человека ограниченна, теряя время на вспоминание зачем и почему, мы теряем и упущенные возможности. Да и к тому же, кто будет после тебя следующим потеряет время. А поставь себя на его место! 
24. Дайте человеку совет. Он говорит: «Хочу самостоятельно написать регистрацию и авторизацию. Приступаю и у меня ступор: не знаю с чего начать. Вроде бы понимаю, что регистрация — это добавление пользователя в базу, но не понимаю с чего начинать?».
Ответ: 1) начать нужно с плана, расписать всё по пунктам, можно на бумаге. 2) следовать короткими шагами по плану: написал код, проверь, если нет ошибок, иди дальше, если есть решай их! 3) очень важно, не пиши весь проект в одном файле! 
25. Объясните человеку в чем разница между $_SESSION и $_COOKIE: «Не пойму в чем разница между сессией и куки? Вроде бы одно и то же…пока полностью не осознал.»?
Ответ: $_SESSION - является простым способом хранения информации для пользователей, это использоваться для сохранения состояния между запросами страниц и после закрытия страницы обновится.
$_COOKIE - это механизм  который используется для хранения данных браузером протокола HTTP. Они позволяют отслеживать или идентифицировать возвращающихся посетителей. Это единственный надежный способ понять, что перед нами тот же пользователь. Так же это отличная штука собирать о нас информацию.
Разница в промежутке времени в котором хранится, обрабатывается информация. И если, ты заметил Рахим показывая видео уроки, открывает браузер в режиме "инкогнито" - это всё не просто так!
26. Дайте человеку совет. Он говорит: «Скачал кучу курсов. По одним названиям можно понять, что я скоро точно стану программистом. Но сколько бы я не смотрел, у меня не получается самостоятельно написать даже простенький скрипт. Что я делаю не так? Как надо подходить к обучению?»
Ответ: по поводу курсов скажу так, выбери одного автора который тебе больше нравиться, особенно если он преподаёт в виде видео курса, с короткими роликами, впитывай информацию небольшими дозами, делай перерывы. Анализируй свой прогресс. Если, всё равно не получается, попробуй пойти другим путём: найди себе ментора или курсы онлайн. Следи за режимом труда и отдыха, питайся с витаминками, ещё лучше будет заниматься физическими упражнениями. Знай, что сапожник пока научится мастерству потеряет много времени, испортит много кожи и обуви, даже может спиться, а ты что потеряешь кроме времени и счёта за электроэнергию! Короче не ной, будь мужиком, пофиг что девчонка!
27. Какие у вас впечатления от первой части практики?
Ответ: до прохождения первой части я не видел свой путь, теперь вижу!
